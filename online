https://www.programiz.com/csharp-programming/online-compiler/

using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Project
{
    public class AccountModel // Model
    {
        public static List<AccountModel> accounts = new List<AccountModel>();
        public static readonly double rate = 1.04; //c#에서 const대신 씀 const는 버전 관리 문제 발생?
        private string name;
        private int password {  get; set; }
        private int money {  get; set; }
        public AccountModel() { }
        public AccountModel(string name, int password)
        {
            this.name = name;
            this.password = password;
            this.money= 0;
        }
        public int Money
        {
            get{    return money;}
            set {   money = value; }
        }
        public string Name
        {
            get {   return name; }
        }
       public int Password
       {
            get {   return password; }
       }
        
    }
    public class AccountView
{
    public static void Main(string[] args)
    {
        Console.WriteLine("\tHi Net-Bank.\t\n");
        while (true)
        {
            InitialPrint();
        }
    }
    public static void InitialPrint()
    {
        Console.WriteLine("\n1.Account Register\t2.Account Login\t3.Account list\t4.close");
        AccountViewModel.InitialList();
    }
    public static void LoginMenu()
    {
        while (true)
        {
            Console.WriteLine("\n1.deposit\t2.withdraw\t3.Check money\t4.future money\t5.account tranfer\t6.logout\n");
            if (AccountViewModel.LoginMenuList())
            {
                AccountViewModel.Current = null; // Current Account Singleton
                break;
            }
        }
    }
}
public class AccountViewModel
{
    private static AccountModel currentAccount = null; //클래스,메서드,인터페이스,네임스페이스,상수=> 파스칼  변수,인수=>카멜
    public static AccountModel Current
    {
        set { currentAccount = value; }
    }
    private const int LoginChance = 5; // 상수 => 파스칼
    public static void InitialList()
    {
        int listOfNum = ReadNum();
        switch (listOfNum)
        {
            case 1:
                RegisterAccount();
                break;
            case 2:
                AccountLogin();
                break;
            case 3:
                PrintAccount();
                break;
            case 4:
                Environment.Exit(0);
                break;
            default:
                Console.WriteLine("wrong input. you try input number 1~4 .\n");
                break;
        }
    }
    public static void RegisterAccount() // Case 1
    {
        string name = ReadName();

        Console.WriteLine("you set password. [Length=4 number]");
        int password = VaildPassword();

        AccountModel account = new AccountModel(name, password);
        AccountModel.accounts.Add(account);
    }

    public static void AccountLogin() // Case 2
    {
        if (AccountLoginOfCheck())
        {
            AccountView.LoginMenu();
        }
        return;
    }

    public static void PrintAccount() //Case 3
    {
        AccountModel.accounts.ForEach(account => Console.WriteLine("\nname:{0}\tmoney:{1}\n", account.Name, account.Money));
    }
    public static bool LoginMenuList()
    {
        int listOfNum = ReadNum();
        switch (listOfNum)
        {
            case 1:
                Deposit();
                return false;
            case 2:
                Withdraw();
                return false;
            case 3:
                Console.WriteLine("name:[{0}]\tlive money:{1}.", currentAccount.Name, currentAccount.Money);
                return false;
            case 4:
                YearLate();
                return false;
            case 5:
                Transfer();
                return false;
            case 6:
                return true;
            default:
                Console.WriteLine("\nwrong input. you try input number 1~6\n");
                return false;
        }
    }
    public static void Deposit() //Login_Case1
    {
        Console.WriteLine("\nHow money input?\n");
        int money = ReadNum();
        if (money == 0) //숫자입력 x 
            return;
        DepositFunc(currentAccount.Name, money);
    }
    public static void Withdraw() //Login_Case2
    {
        Console.WriteLine("\nHow money draw off?\n");
        int money = ReadNum();
        if (money == 0) // 숫자입력 x
            return;
        if (WithdrawFunc(money))
        {
            Console.WriteLine("\ncomplete.\n");
        }
    }
    public static void YearLate() //Login_Case4
    {
        double futureMoney = (double)currentAccount.Money;
        Console.WriteLine("\n몇 년후의 복리가 궁금하십니까?\n");
        int year = ReadNum();
        if (year <= 0)
            return;
        for (int i = 0; i < year; i++)
        {
            futureMoney *= AccountModel.rate;
        }
        Console.WriteLine("{0}년 후 잔액은\t{1:0.00}원 입니다.", year, futureMoney);
    }
    public static void Transfer() //Login_Case5
    {
        Console.WriteLine("\nwho?\n");
        string readName = Console.ReadLine();
        FindAccount(ref readName);
        Console.WriteLine("\nHow money?\n");
        int money = ReadNum();
        if (money == 0)
            return;
        if (PasswordCheck())
        {
            if (WithdrawFunc(money))
                ;
            else
                return;
            DepositFunc(readName, money);
            Console.WriteLine("\ncomplete.\n");
            return;
        }
        else
        {
            return;
        }
    }
    public static int ReadNum()
    {
        try
        {
            int readNum = int.Parse(Console.ReadLine());
            return readNum;
        }
        catch (FormatException)
        {
            Console.WriteLine("Not Number.");
            return 0;
        }
    }
    public static string ReadName()
    {
        Console.WriteLine("input name.");
        string readName = Console.ReadLine();
        return readName;
    }
    public static int VaildPassword()
    {
        string readPassword;
        int password;
        while (true)
        {
            readPassword = Console.ReadLine();
            if (readPassword.Length == 4 && int.TryParse(readPassword, out password))
            {
                return password; // 4자리 숫자
            }
            else
            {
                Console.WriteLine("wrong number!!");
            }
        }
    }
    public static AccountModel VaildAccount(string name)
    {
        AccountModel account = AccountModel.accounts.Find(account => account.Name == name);
        return account;
    }
    public static AccountModel FindAccount(ref string name) //참조형 가독성? 유효하지않는 이름인 경우 name 변경
    {
        AccountModel account = null;
        while (true)
        {
            account = VaildAccount(name);
            if (account!=null)
            {
                return account;
            }
            else
            {
                Console.WriteLine("not exist Account.\ntry input name.\n");
                name = Console.ReadLine();
            }
        }
    }
    public static bool PasswordCheck()
    {
        Console.WriteLine("\n[{0}]\t input password.", currentAccount.Name);
        int password = ReadNum();
        if (password == 0)
            return false;
        if (password == currentAccount.Password)
        {
            return true;
        }
        Console.WriteLine("not wrong");
        return false;
    }
    public static bool LoginPassword(string name)
    {
        for (int i = 0; i < LoginChance; i++) //const LoginChance = 5
        {
            if (PasswordCheck())
            {
                return true;
            }
            else
            {
                Console.WriteLine("wrong password. count:{0}", i + 1);
            }
        }
        Console.WriteLine("\n5 count wrong.\n");
        return false;
    }
    public static bool AccountLoginOfCheck()
    {
        string name = ReadName();

        if (currentAccount == null) //singleton
            currentAccount = FindAccount(ref name);
        else
        {
            Console.WriteLine("\nAccount isn't current\n");
            return false;
        }
        if (LoginPassword(name))
            return true;

        return false;
    }
    public static void DepositFunc(string name, int money)
    {
        if (string.Equals(name, currentAccount.Name)) //입금
            currentAccount.Money += money;
        else
        {
            AccountModel receiveaccount = FindAccount(ref name); // 계좌 이체
            receiveaccount.Money += money;
        }
    }
    public static bool WithdrawFunc(int money)
    {
        try
        {
            int result = currentAccount.Money - money;
            if (result < 0)
            {
                throw new Exception("\nAccount not have money.\n");
            }
            currentAccount.Money = result;
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return false;
        }
    }
}
}
